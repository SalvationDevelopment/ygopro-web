// Generated by CoffeeScript 1.6.2
(function() {
  var Duel, Replay, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $('.side_tabs').tabs();

  $('#setting_enable_3d').change(function() {
    if (this.checked) {
      return $('.field').transition({
        scale: 2,
        translate: [116, 40],
        rotateX: 45
      });
    } else {
      return $('.field').transition({
        scale: 2,
        translate: [116, 40],
        rotateX: 0
      });
    }
  });

  Duel = (function(_super) {
    __extends(Duel, _super);

    function Duel() {
      _ref = Duel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Duel.avatar_url = 'http://my-card.in/users/:name.png';

    Duel.prototype.set_player_name = function(name) {
      return this.set_name('player', name);
    };

    Duel.prototype.set_opponent_name = function(name) {
      return this.set_name('opponent', name);
    };

    Duel.prototype.set_player_lp = function(lp) {
      return this.set_lp('player', lp);
    };

    Duel.prototype.set_opponent_lp = function(lp) {
      return this.set_lp('opponent', lp);
    };

    Duel.prototype.set_phase = function(phase) {
      var phases;

      phases = {
        DP: '抽卡阶段',
        SP: '准备阶段',
        M1: '主要阶段1',
        BP: '战斗阶段',
        M2: '主要阶段2',
        EP: '结束阶段'
      };
      humane.log(phases[phase], {
        timeout: 800
      });
      $(".phase[data-phase!=" + phase + "]").removeClass('active');
      return $(".phase[data-phase=" + phase + "]").addClass('active');
    };

    Duel.prototype.set_turn = function(turn) {
      $('#turn').html(turn);
      if (turn % 2) {
        $('.phase').addClass('btn-info');
        return $('.phase').removeClass('btn-danger');
      } else {
        $('.phase').removeClass('btn-info');
        return $('.phase').addClass('btn-danger');
      }
    };

    Duel.prototype.set_name = function(player, name) {
      $("#" + player + "_name").html(name);
      return $("#" + player + "_avatar").attr('src', Duel.avatar_url.replace(':name', name));
    };

    Duel.prototype.set_lp = function(player, lp) {
      if (typeof lp === "string") {
        if (lp.slice(0, 2) === '+=') {
          lp = parseInt($("#" + player + "_lp").html()) + parseInt(lp.slice(2));
        } else if (lp.slice(0, 2) === '-=') {
          lp = parseInt($("#" + player + "_lp").html()) - parseInt(lp.slice(2));
        } else {
          lp = parseInt(lp);
        }
      }
      $("#" + player + "_lp").html(lp);
      return $("#" + player + "_lp_bar").animate({
        'width': "" + ((lp <= 0 ? 0 : lp >= 8000 ? 1 : lp / 8000) * 100) + "%"
      });
    };

    return Duel;

  })(Spine.Controller);

  Replay = (function() {
    function Replay() {}

    Replay.prototype.speed = $('#setting_action_inteval').val();

    Replay.prototype.get_action_inteval = function() {
      return Math.pow(10, 4 - $('#setting_action_inteval').val() * 0.2);
    };

    return Replay;

  })();

  this.duel = new Duel();

  this.replay = new Replay();

  $('#setting_action_inteval_slider').slider({
    min: 1,
    max: 10,
    value: $("#setting_action_inteval").val(),
    slide: function(event, ui) {
      return $("#setting_action_inteval").val(ui.value);
    }
  });

  $(document).ready(function() {
    return $('#setting_enable_3d').change();
  });

  $('.zone').each(function(index, element) {
    return $(element).data('card_list', []);
  });

}).call(this);
